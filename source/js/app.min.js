/**
 * Operates the animation on the bottom of the What is SETI page - only adds a class on scroll
 *
 * @namespace SETI
 * @name SETI.AnimDemo
 *
 */
SETI.AnimDemo = (/** @lends SETI.AnimDemo */function() {

    var $window,
        $demoContainer,
        cssClass = 'show';

    /**
     * Initialize the module
     *
     * @public
     * @returns {void}
     */
    function init() {
        initDOMElements();
        if($demoContainer.length) {
            initBindings();
        }
    }

    /**
     * Get DOM elements for the module
     *
     * @private
     * @returns {void}
     */
    function initDOMElements() {
        $window = SETI.Performance.getCachedDOM().$window;
        $demoContainer = $('[data-map-demo-anim]');
    }

    function showAnimations() {
        var scrollY = $window.scrollTop(),
            scrolledIntoView = $demoContainer.offset().top,
            height = $demoContainer.height();

        if(scrollY + height * 2 > scrolledIntoView && !$demoContainer.hasClass(cssClass)) {
            $demoContainer.addClass(cssClass);
        }


    }

    /**
     * Init event bindings for the module
     * Everything is bound to the BODY and events are propagated, because selects can be created/modified dynamically
     *
     * @private
     * @returns {void}
     */
    function initBindings() {
        $window.on({
            scroll: window.debounce(showAnimations, 10)
        });
    }

    return {
        init: init
    };

}());
/**
 * Main application class
 *
 * @namespace SETI
 * @name SETI.Main
 * @returns {Object}
 */
SETI.Main = (/** @lends SETI.Main */function () {

	var instance;

	/**
	 * Initialize application and needed subclasses
	 *
	 * @public
	 * @returns {void}
	 */
	function init() {
        SETI.Performance.init();
        SETI.MobileNav.init();
        SETI.AnimDemo.init();
        SETI.StickyHeader.init();
	}

	return {

		/**
		 * Get singleton SETI.Main instance
		 *
		 * @public
		 * @memberof SETI.Main
		 * @returns {SETI.Main}
		 */
		getInstance: function () {
			if (!instance) {
				instance = init();
			}

			return instance;
		}
	};

}());
/**
 * Operates the navigation in 'mobile' mode, when the main menu is hidden behind a hamburger
 *
 * @namespace SETI
 * @name SETI.MobileNav
 *
 */
SETI.MobileNav = (/** @lends SETI.MobileNav */function() {

	var $html,
        $logo,
        $hamburger,
		$coverLayer,
		cssClass = 'mobile-nav-opened';

	/**
	 * Initialize the module
	 *
	 * @public
	 * @returns {void}
	 */
	function init() {
		initDOMElements();
        if($logo.length && $hamburger.length && $coverLayer.length) {
            initBindings();
        }
	}

	/**
	 * Get DOM elements for the module
	 *
	 * @private
	 * @returns {void}
	 */
	function initDOMElements() {
		$html = SETI.Performance.getCachedDOM().$html;
        $logo = $('#js-logo');
        $hamburger = $('#js-hamburger');
		$coverLayer = $('#js-mobile-nav-cover');
	}

	/**
	 * Init event bindings for the module
	 * Everything is bound to the BODY and events are propagated, because selects can be created/modified dynamically
	 *
	 * @private
	 * @returns {void}
	 */
	function initBindings() {
        $hamburger.on({
            click: toggle
        });

        $logo.on({
            click: function(e) {
                if($html.hasClass(cssClass)) {
                    e.preventDefault();
                    $html.removeClass(cssClass);
					$logo.blur();
                }
            }
        });

		$coverLayer.on({
			click: function() {
				if($html.hasClass(cssClass)) {
                    $html.removeClass(cssClass);
                }	
			}
		});
	}

    /**
	 * Toggle the class on the root element that changes the UI state
	 *
	 * @private
	 * @returns {void}
	 */
    function toggle() {
        if(!$html.hasClass(cssClass)) {
            $html.addClass(cssClass);
        } else {
            $html.removeClass(cssClass);
        }
    }

	return {
		init: init
	};

}());
/**
 * Performance increase module (cache, device optimizations)
 *
 * @namespace SETI
 * @name SETI.Performance
 */
SETI.Performance = (/** @lends SETI.Performance */function () {

	var exports,
		$cachedDOM,
		windowResize,
		deviceProperties;

	/**
	 * Init performance helpers
	 *
	 */
	function init() {
		try {
			initCacheDOM();
			initBindings();
			saveDeviceProperties();
		} catch (e) {
			throw new ReferenceError('SETI.Performance cannot be initialized!');
		}
	}

	/**
	 * Cache DOM elements
	 *
	 * @public
	 */
	function initCacheDOM() {

		$cachedDOM = {
			window: window,
			$window: $(window),
			$body: $(document.body),
			$page: $('[data-page]'),
			$html: $('html'),
			$header: $('#js-header')
		};

	}

	function initBindings() {
		$cachedDOM.$window.on('resize', resizeWindow);
	}

	/**
	 * Window resize hook
	 */
	function resizeWindow() {
		clearTimeout(windowResize);

		windowResize = setTimeout(function () {
			saveDeviceProperties();
		}, 200);

	}

	/**
	 * Save device properties to an object
	 */
	function saveDeviceProperties() {
		var w = window,
			d = document,
			e = d.documentElement,
			g = d.getElementsByTagName('body')[0],
			W = w.innerWidth || e.clientWidth || g.clientWidth,
			H = w.innerHeight || e.clientHeight || g.clientHeight;

		deviceProperties = {
			window: {
				width: W,
				height: H
			}
		};

	}

	/**
	 * Return cached DOM elements
	 *
	 * @returns {Object} $cachedDOM - Object containing all cached DOM elements
	 * @public
	 */
	function getCachedDOM() {
		return $cachedDOM;
	}

	/**
	 * Return saved device properties
	 *
	 * @returns {Object} deviceProperties - width, height as Number
	 * @public
	 */
	function getDeviceProperties() {
		return deviceProperties;
	}

	exports = {
		init: init,
		initCacheDOM: initCacheDOM,
		getCachedDOM: getCachedDOM,
		getDeviceProperties: getDeviceProperties
	};

	return exports;

}());

/**
 * Operates the height change of the header
 *
 * @namespace SETI
 * @name SETI.StickyHeader
 *
 */
SETI.StickyHeader = (/** @lends SETI.StickyHeader */function() {

    var $window,
        $header,
        initialHeight,
        cssClass = 'header--scrolled';

    /**
     * Initialize the module
     *
     * @public
     * @returns {void}
     */
    function init() {
        initDOMElements();
        if($header.data('sticky')) {
            initBindings();
        }
    }

    /**
     * Get DOM elements for the module
     *
     * @private
     * @returns {void}
     */
    function initDOMElements() {
        $header = SETI.Performance.getCachedDOM().$header;
        $window = SETI.Performance.getCachedDOM().$window;
        initialHeight = $header.height();
    }


    /**
     * Init event bindings for the module
     * Everything is bound to the BODY and events are propagated, because selects can be created/modified dynamically
     *
     * @private
     * @returns {void}
     */
    function initBindings() {
        $window.on({
            scroll: function() {
                if($window.scrollTop() > initialHeight) {
                    $header.addClass(cssClass);
                } else {
                    $header.removeClass(cssClass);
                }
            }
        });
    }

    return {
        init: init
    };

}());